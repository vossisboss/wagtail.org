@use 'sass:list';

// Media queries
@mixin media-query($queries...) {
    @each $query in $queries {
        @each $breakpoint in $breakpoints {
            $name: list.nth($breakpoint, 1);
            $declaration: list.nth($breakpoint, 2);

            @if $query == $name and $declaration {
                @media only screen and #{$declaration} {
                    @content;
                }
            }
        }
    }
}

// Hide text
@mixin hidden() {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

// Streamfield spacing
@mixin sf-spacing($multiple) {
    margin-bottom: 25px * $multiple;
}

// Adds coloured offset background on the right
@mixin offset-bg-right() {
    position: relative;

    &::after {
        content: '';
        background-color: var(--color--enhancers);
        opacity: 0;
        border-radius: 15px;
        position: absolute;
        width: 80%;
        height: 100%;
        top: 20px;
        right: 0;
        transform: rotate(-3deg);
        z-index: -1;
        transition: opacity 0.3s, transform 0.3s;

        @include media-query(medium) {
            top: 10px;
            right: -20px;
            opacity: 0.75;
        }
    }
}

// To be used with offset-bg-right() - apply this on hover of parent
@mixin offset-bg-hover-right() {
    &::after {
        @include media-query(medium) {
            transform: rotate(-2deg) translate3d(-15px, 10px, 0);
        }
    }
}

// Adds coloured offset background on the left
@mixin offset-bg-left() {
    position: relative;

    &::after {
        content: '';
        width: 80%;
        height: 85%;
        background-color: var(--color--enhancers);
        opacity: 0;
        position: absolute;
        z-index: -1;
        border-radius: 15px;
        transition: opacity 0.3s;
    }
}

// To be used with offset-bg-left() - apply this on hover of parent
@mixin offset-bg-hover-left() {
    &::after {
        opacity: 0.75;
        transform: rotate(-3deg) translate3d(-37px, 20px, 0);
    }
}

// Places the focus indicator within the element
@mixin focus-internal() {
    &:focus-visible {
        outline-offset: -4px;
    }
}

// z-index
// Map z-index keys
@function z-index($key) {
    @return map-get($z-index, $key);
}

@mixin z-index($key) {
    z-index: z-index($key);
}
